{"version":3,"sources":["components/Header.js","components/Grid.js","components/Row.js","components/Board2048.js","containers/MergeSchool.js","App.js","reportWebVitals.js","index.js"],"names":["Header","handleReset","qs_ranking","best_qs_ranking","step","id","className","onClick","Grid","grid_value","row_idx","column_idx","grid_flag","grid_id","value_id","temp_class_name","value","2","4","8","16","32","64","128","256","512","1024","2048","4096","8192","16384","32768","65536","Row","row_vector","row_flag","map","Board2048","board","gameover","win","boardflag","boardClassName","infoClassName","outSentence","secret_seed","tokenString","split","i","length","charCodeAt","MergeSchool","props","prng","seed","salt","mod","temp","initializeBoard","initializeBoardFlag","boardset","putGridRandom","setState","getEmptyGrid","empty_grid","j","push","init","random_num","state","random_empty_grid","justifyMove","prev","next","JSON","stringify","moveGrid","direction","nextBoard","moveUp","checkAndUpdateAfterMove","moveRight","moveDown","moveLeft","nextBoardSetWithRandom","qsRankNow","stepNow","combination","checkGameover","prevBoard","rotateAsRight","rotateClockwise","output","rotateCounterClockwise","r","row","c","current","unshift","matrix","result","e","reverse","gameoverflag","includes","checkWin","setBadEnd","setGoodEnd","document","querySelector","addEventListener","this","handleKeyDown","bind","event","preventDefault","keyCode","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2669dd37.chunk.js","sourcesContent":["export default function Header({ handleReset, qs_ranking, best_qs_ranking, step }){\n\n    return (\n        <>\n        <h1 id=\"title\">Merging School</h1>\n        <div className=\"btn-groups\">\n            <div className=\"qs-ranking\" id=\"general-qs-ranking\">QS: <p id=\"general-qs-ranking-value\">{qs_ranking}</p></div>\n            <div className=\"qs-ranking\" id=\"general-step\">Step: <p id=\"general-step-value\">{step}</p></div>\n            <div className=\"qs-ranking\" id=\"best-qs-ranking\">Best: <p id=\"best-qs-ranking-value\">{best_qs_ranking}</p></div>\n            <div className=\"button\" id=\"reset-button\" onClick={handleReset}>New Game</div>\n        </div>\n        </>\n    );\n}","export default function Grid ({ grid_value, row_idx, column_idx, grid_flag}) {\n    \n    let grid_id = `grid-${row_idx}-${column_idx}`;\n    let value_id = `value-${row_idx}-${column_idx}`;\n    let temp_class_name = 'grid';\n    let value = (grid_value === 0) ? '' : grid_value;\n\n    const mapping = {'':\"\", 2:\"NCTU\", 4:\"NYMU\", 8:\"NTU\", 16:\"UCSD\", 32:\"UBC\", 64:\"CUHK\", 128:\"UCLA\", 256:\"NYU\",512:\"UCB\",1024:\"HKUST\",\n                    2048:\"UTokyo\", 4096:\"Columbia\", 8192:\"Yale\", 16384:\"Cambridge\", 32768:\"Stanford\", 65536:\"MIT\"}\n    \n    if (value) {\n        temp_class_name += ` level-${value}`;\n    }\n    if (grid_flag) {\n        temp_class_name += \" school-fade-in\"\n    }\n\n    return (\n        <td>\n            <div className={temp_class_name} id={grid_id}>\n                <div className=\"school-name\" id={value_id}>{mapping[value]}</div>\n            </div>\n        </td>\n    );\n}","import Grid from '../components/Grid'\nexport default function Row ({ row_vector, row_idx, row_flag}) {\n    return (\n        <tr>\n          {row_vector.map((value, column_idx) => (<Grid key={column_idx} grid_value={value} row_idx={row_idx} column_idx={column_idx} grid_flag={row_flag[column_idx]}/>))}\n        </tr>\n    );\n};","import Row from './Row'\n\nexport default function Board2048 ({ board, handleReset, gameover, win, boardflag}) {\n\n    let boardClassName = \"board\";\n    let infoClassName = \"info\";\n    if (gameover) {\n        boardClassName += \" game-over-board\";\n        infoClassName += \" game-over-wrapper end-fade-in\";\n    }\n    let outSentence = \"No funding this year QAO\";\n    if (win){\n        outSentence = \"You should study a PhD!\";\n    }\n\n    return (\n        <>\n        <table className={boardClassName} id=\"board-full\">\n            <tbody>\n                {board.map((row_vector, row_idx) => (<Row key={row_idx} row_vector={row_vector} row_idx={row_idx} row_flag={boardflag[row_idx]}/>))}\n            </tbody>\n        </table>\n        <div className={infoClassName} id=\"game-over-info\">\n            <span id=\"game-over-text\">{outSentence}</span>\n            <div className=\"button\" id=\"game-over-button\" onClick={handleReset}>Try again</div>\n        </div>\n        </>\n    );\n};","import React, { Component } from 'react';\nimport Header from '../components/Header';\nimport Board2048 from '../components/Board2048'\nimport '../containers/MergeSchool.css';\n\nlet secret_seed = 1;\nconst tokenString = \"Kaminyou\".split(\"\");\nfor(let i = 0; i < tokenString.length; i++){\n    secret_seed *= tokenString[i].charCodeAt(0);\n    secret_seed = secret_seed % 0xffffffff;\n}\n\nclass MergeSchool extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            board: [[0,0,0,0],\n            [0,0,0,0],\n            [0,0,0,0],\n            [2,2,0,0]], // the 4*4 board\n            boardflag: [[0,0,0,0],\n            [0,0,0,0],\n            [0,0,0,0],\n            [1,1,0,0]], // the board to preserve the flag of new generated number for animation\n            qs_ranking: 32768, // qs ranking now \n            best_qs_ranking: 32768, // the best ranking\n            gameover: false, // flag for game over\n            step: 0, // step\n            win: false, // flag for win i.e. get a \"65536\" grid\n            seed: secret_seed\n        };\n    }\n\n    // Pesudo random number generator\n    // 4 bytes hashing function By Thomas Wang or Robert Jenkins\n    prng = (seed, salt, mod) => {\n        let temp = seed + salt;\n        temp = (temp+0x7ed55d16) + (temp<<12);\n        temp = (temp^0xc761c23c) ^ (temp>>19);\n        temp = (temp+0x165667b1) + (temp<<5);\n        temp = (temp+0xd3a2646c) ^ (temp<<9);\n        temp = (temp+0xfd7046c5) + (temp<<3);\n        temp = (temp^0xb55a4f09) ^ (temp>>16);\n        if( temp < 0 ) temp = 0xffffffff + temp;\n        return (temp % mod);\n    }   \n    \n    // Create board and add two \"2\" and reset everything required\n    initializeBoard = () => {\n        let board = [[0,0,0,0],\n                     [0,0,0,0],\n                     [0,0,0,0],\n                     [0,0,0,0]];\n        let boardflag = this.initializeBoardFlag();\n        let boardset = this.putGridRandom(board, boardflag, true);\n        boardset = this.putGridRandom(boardset.board, boardset.boardflag, true);\n        this.setState({board:boardset.board, qs_ranking: 32768, gameover: false, step: 0, win:false, boardflag:boardset.boardflag});\n    }\n\n    \n    \n    // Get all empty x y coordinates in board\n    getEmptyGrid = (board) => {\n        let empty_grid = [];\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j<4; j++) {\n                if (board[i][j] === 0) {\n                    empty_grid.push([i, j])\n                }\n            }\n        }\n        return empty_grid;\n    }\n    \n    // Put one \"2\" in random empty grid\n    putGridRandom = (board, boardflag, init) => {\n        let empty_grid = this.getEmptyGrid(board);\n        let random_num = this.prng(this.state.seed, this.state.step, empty_grid.length);\n        if (init){\n            random_num = this.prng(this.state.seed, 0, empty_grid.length);\n        } \n        let random_empty_grid = empty_grid[random_num];\n        board[random_empty_grid[0]][random_empty_grid[1]] = 2;\n        boardflag[random_empty_grid[0]][random_empty_grid[1]] = 1;\n        return {board, boardflag};\n    }\n    \n    // Check if one move is effecitve\n    justifyMove = (prev, next) => {\n        let prev_string = JSON.stringify(prev)\n        let new_string = JSON.stringify(next)\n        return (prev_string !== new_string) ? true : false;\n    }\n    \n    // Move\n    moveGrid = (direction) => {\n        if (!this.state.gameover) {\n            if (direction === 'up') {\n                const nextBoard = this.moveUp(this.state.board);\n                this.checkAndUpdateAfterMove(nextBoard);\n            } \n            else if (direction === 'right') {\n                const nextBoard = this.moveRight(this.state.board);\n                this.checkAndUpdateAfterMove(nextBoard);\n            } \n            else if (direction === 'down') {\n                const nextBoard = this.moveDown(this.state.board);\n                this.checkAndUpdateAfterMove(nextBoard);\n            } \n            else if (direction === 'left') {\n                const nextBoard = this.moveLeft(this.state.board);\n                this.checkAndUpdateAfterMove(nextBoard);\n            }\n        } \n    }\n\n    // Check everything after one move including gameover and win\n    // Also, the step, ranking, best ranking should be updated here\n    checkAndUpdateAfterMove = (nextBoard) => {\n        if (this.justifyMove(this.state.board, nextBoard.board)) {\n            let boardflag = this.initializeBoardFlag();\n            const nextBoardSetWithRandom = this.putGridRandom(nextBoard.board, boardflag, false);\n            let qsRankNow = this.state.qs_ranking;\n            let stepNow = this.state.step;\n            qsRankNow -= nextBoard.combination\n            this.setState({board: nextBoardSetWithRandom.board, qs_ranking: qsRankNow, step: stepNow + 1, boardflag:nextBoardSetWithRandom.boardflag});\n            \n            if (qsRankNow < this.state.best_qs_ranking){\n                this.setState({best_qs_ranking: qsRankNow});\n            }\n\n            if (this.checkGameover(nextBoardSetWithRandom.board)) {\n                this.setState({gameover: true});\n            }\n        }\n    }\n    \n    // Moveup function\n    moveUp = (prevBoard) => {\n        let rotateAsRight = this.rotateClockwise(prevBoard);\n        let output = this.moveRight(rotateAsRight);\n        let board = this.rotateCounterClockwise(output.board);\n        let combination =  output.combination;\n    \n        return {board, combination};\n    }\n    \n    // Moveright function\n    moveRight = (prevBoard) => {\n        let board = [];\n        let combination = 0;\n    \n        for (let r = 0; r < prevBoard.length; r++) {\n            let row = [];      \n            for (let c = 0; c < prevBoard[r].length; c++) {\n                let current = prevBoard[r][c];\n                (current === 0) ? row.unshift(current) : row.push(current);\n            }\n            board.push(row);\n        }\n    \n        for (let r = 0; r < board.length; r++) {\n            // special case\n            if ((board[r][0] === board[r][1]) && (board[r][0] !== 0) && (board[r][2] === board[r][3]) && (board[r][2] !== 0)) {\n                board[r][3] = board[r][3] * 2;\n                board[r][2] = board[r][1] * 2;\n                board[r][1] = 0;\n                board[r][0] = 0;\n                combination += 2;\n                continue;\n            }\n\n            for (let c = board[r].length - 1; c > 0; c--) {\n                if (board[r][c] > 0 && board[r][c] === board[r][c - 1]) {\n                    board[r][c] = board[r][c] * 2;\n                    board[r][c - 1] = 0;\n                    combination += 1;\n                } else if (board[r][c] === 0 && board[r][c - 1] > 0) {\n                    board[r][c] = board[r][c - 1];\n                    board[r][c - 1] = 0;\n                }\n            }\n        }\n    \n        return {board, combination};\n    }\n    \n    // Movedown function\n    moveDown = (prevBoard) => {\n        let rotateAsRight = this.rotateCounterClockwise(prevBoard);\n        let output = this.moveRight(rotateAsRight);\n        let board = this.rotateClockwise(output.board);\n        let combination =  output.combination;\n    \n        return {board, combination};\n    }\n    \n    // Moveleft function\n    moveLeft = (prevBoard) => {\n        let rotateAsRight = this.rotateClockwise(this.rotateClockwise(prevBoard));\n        let output = this.moveRight(rotateAsRight);\n        let board = this.rotateCounterClockwise(this.rotateCounterClockwise(output.board));\n        let combination =  output.combination;\n    \n        return {board, combination};\n    }\n    \n    // Rotate the matrix clockwisely\n    rotateClockwise = (matrix) => {\n        let result = [];\n        for(let i = 0; i < matrix[0].length; i++) {\n            let row = matrix.map(e => e[i]).reverse();\n            result.push(row);\n        }\n        return result;\n    }\n    \n    // Rotate the matrix counterclockwisely\n    rotateCounterClockwise = (matrix) => {\n        let result = [];\n        for(let i = matrix[0].length - 1; i >= 0 ; i--) {\n            let row = matrix.map(e => e[i]);\n            result.push(row);\n        }\n        return result;\n    }\n    \n    // Check if it is gameover\n    checkGameover = (board) => {\n        let moves = [\n            this.justifyMove(board, this.moveUp(board).board),\n            this.justifyMove(board, this.moveRight(board).board),\n            this.justifyMove(board, this.moveDown(board).board),\n            this.justifyMove(board, this.moveLeft(board).board)\n        ];\n        \n        let gameoverflag = (moves.includes(true)) ? false : true;\n\n        if (this.checkWin(board)) {\n            gameoverflag = true;\n        }\n        \n        return gameoverflag;\n    }\n\n    // Check if it is win\n    checkWin = (board) => {\n        for (let i=0; i<board.length;i++){\n            for (let j=0; j<board[i].length;j++){\n                if (board[i][j] === 65536){\n                    this.setState({win:true});\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    componentDidMount() {\n        const body = document.querySelector('body');\n        body.addEventListener('keydown', this.handleKeyDown.bind(this));\n    }\n    \n    handleKeyDown(event) {\n        event.preventDefault();\n        if (event.keyCode === 37) {\n            this.moveGrid(\"left\");\n        } else if (event.keyCode === 38) {\n            this.moveGrid(\"up\");\n        } else if (event.keyCode === 39) {\n            this.moveGrid(\"right\");\n        } else if (event.keyCode === 40) {\n            this.moveGrid(\"down\");\n        }\n    }\n\n    // Useful function for you to check the endgame\n    setBadEnd = () => {\n        let nextBoard = [[2,4,2,4],\n                        [4,2,4,2],\n                        [2,4,2,128],\n                        [4,128,2,2]];\n        this.setState({board: nextBoard});\n    }\n    \n    // Useful function for you to check the best result\n    setGoodEnd = () => {\n        let nextBoard = [[2,2,4,8],\n                        [128,64,32,16],\n                        [256,512,1024,2048],\n                        [32768,16384,8192,4096]];\n        this.setState({board: nextBoard});\n    }\n\n    // Initialize flag board\n    initializeBoardFlag = () => {\n        let boardflag = [[0,0,0,0],\n                        [0,0,0,0],\n                        [0,0,0,0],\n                        [0,0,0,0]];\n        return boardflag;\n    }\n\n    render() {\n        return (\n            <>      \n                <Header handleReset={this.initializeBoard} qs_ranking={this.state.qs_ranking} best_qs_ranking={this.state.best_qs_ranking} step={this.state.step}/>\n                <Board2048 className=\"wrapper\" board={this.state.board} handleReset={this.initializeBoard} gameover={this.state.gameover} win={this.state.win} boardflag={this.state.boardflag}/>\n                <div className=\"btn-groups\">\n                    <div className=\"btn-useful\" id=\"badend-btn\" onClick={this.setBadEnd}>BadEnd</div>\n                    <div className=\"btn-useful\" id=\"goodend-btn\" onClick={this.setGoodEnd}>GoodEnd</div>\n                </div>\n            </>\n        );\n    }\n};\n\nexport default MergeSchool;","import './App.css';\nimport MergeSchool from './containers/MergeSchool'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MergeSchool/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}